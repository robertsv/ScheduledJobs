package lv.robertsv.speedment.test.webjobs.public_.scheduled_job.impl;

import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.LongIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.List;
import javax.annotation.Generated;
import lv.robertsv.speedment.test.webjobs.public_.scheduled_job.ScheduledJob;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@2e10fb13.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class ScheduledJobManagerImpl extends AbstractSqlManager<ScheduledJob> {
    
    private final TypeMapper<Long, Long> idTypeMapper = new LongIdentityMapper();
    private final TypeMapper<String, String> pathTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> scheduleTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> statusTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> enabledTypeMapper = new IntegerIdentityMapper();
    
    public ScheduledJobManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<ScheduledJob> getEntityClass() {
        return ScheduledJob.class;
    }
    
    @Override
    public Object get(ScheduledJob entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "path" : return entity.getPath();
            case "schedule" : return entity.getSchedule();
            case "status" : return entity.getStatus();
            case "enabled" : return entity.getEnabled();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(ScheduledJob entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Long) value); break;
            case "path" : entity.setPath((String) value); break;
            case "schedule" : entity.setSchedule((String) value); break;
            case "status" : entity.setStatus((String) value); break;
            case "enabled" : entity.setEnabled((Integer) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("webjobs.public.scheduled_job");
    }
    
    protected ScheduledJob defaultReadEntity(ResultSet resultSet) {
        final ScheduledJob entity = newInstance();
        try {
            entity.setId(idTypeMapper.toJavaType(resultSet.getLong(1)));
            entity.setPath(pathTypeMapper.toJavaType(resultSet.getString(2)));
            entity.setSchedule(scheduleTypeMapper.toJavaType(resultSet.getString(3)));
            entity.setStatus(statusTypeMapper.toJavaType(resultSet.getString(4)));
            entity.setEnabled(enabledTypeMapper.toJavaType(getInt(resultSet, 5)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public ScheduledJob newInstance() {
        return new ScheduledJobImpl(speedment);
    }
    
    @Override
    public List<?> primaryKeyFor(ScheduledJob entity) {
        return Collections.emptyList();
    }
}